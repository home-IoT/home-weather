// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/home-IoT/home-weather/gen/models"
)

// GetSensorsListReader is a Reader for the GetSensorsList structure.
type GetSensorsListReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSensorsListReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSensorsListOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		result := NewGetSensorsListDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetSensorsListOK creates a GetSensorsListOK with default headers values
func NewGetSensorsListOK() *GetSensorsListOK {
	return &GetSensorsListOK{}
}

/*GetSensorsListOK handles this case with default header values.

Success
*/
type GetSensorsListOK struct {
	Payload *models.SensorList
}

func (o *GetSensorsListOK) Error() string {
	return fmt.Sprintf("[GET /sensors][%d] getSensorsListOK  %+v", 200, o.Payload)
}

func (o *GetSensorsListOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SensorList)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorsListDefault creates a GetSensorsListDefault with default headers values
func NewGetSensorsListDefault(code int) *GetSensorsListDefault {
	return &GetSensorsListDefault{
		_statusCode: code,
	}
}

/*GetSensorsListDefault handles this case with default header values.

Error
*/
type GetSensorsListDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get sensors list default response
func (o *GetSensorsListDefault) Code() int {
	return o._statusCode
}

func (o *GetSensorsListDefault) Error() string {
	return fmt.Sprintf("[GET /sensors][%d] getSensorsList default  %+v", o._statusCode, o.Payload)
}

func (o *GetSensorsListDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
