// Code generated by go-swagger; DO NOT EDIT.

package operations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/home-IoT/jupiter-cli/gen/models"
)

// GetSensorDataRawReader is a Reader for the GetSensorDataRaw structure.
type GetSensorDataRawReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetSensorDataRawReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetSensorDataRawOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	case 404:
		result := NewGetSensorDataRawNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	case 504:
		result := NewGetSensorDataRawGatewayTimeout()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		result := NewGetSensorDataRawDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetSensorDataRawOK creates a GetSensorDataRawOK with default headers values
func NewGetSensorDataRawOK() *GetSensorDataRawOK {
	return &GetSensorDataRawOK{}
}

/*GetSensorDataRawOK handles this case with default header values.

Success
*/
type GetSensorDataRawOK struct {
	Payload *models.SensorResponseRaw
}

func (o *GetSensorDataRawOK) Error() string {
	return fmt.Sprintf("[GET /sensors/{sensorId}/raw][%d] getSensorDataRawOK  %+v", 200, o.Payload)
}

func (o *GetSensorDataRawOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.SensorResponseRaw)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetSensorDataRawNotFound creates a GetSensorDataRawNotFound with default headers values
func NewGetSensorDataRawNotFound() *GetSensorDataRawNotFound {
	return &GetSensorDataRawNotFound{}
}

/*GetSensorDataRawNotFound handles this case with default header values.

Sensor not found.
*/
type GetSensorDataRawNotFound struct {
}

func (o *GetSensorDataRawNotFound) Error() string {
	return fmt.Sprintf("[GET /sensors/{sensorId}/raw][%d] getSensorDataRawNotFound ", 404)
}

func (o *GetSensorDataRawNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSensorDataRawGatewayTimeout creates a GetSensorDataRawGatewayTimeout with default headers values
func NewGetSensorDataRawGatewayTimeout() *GetSensorDataRawGatewayTimeout {
	return &GetSensorDataRawGatewayTimeout{}
}

/*GetSensorDataRawGatewayTimeout handles this case with default header values.

Sensor is not available.
*/
type GetSensorDataRawGatewayTimeout struct {
}

func (o *GetSensorDataRawGatewayTimeout) Error() string {
	return fmt.Sprintf("[GET /sensors/{sensorId}/raw][%d] getSensorDataRawGatewayTimeout ", 504)
}

func (o *GetSensorDataRawGatewayTimeout) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewGetSensorDataRawDefault creates a GetSensorDataRawDefault with default headers values
func NewGetSensorDataRawDefault(code int) *GetSensorDataRawDefault {
	return &GetSensorDataRawDefault{
		_statusCode: code,
	}
}

/*GetSensorDataRawDefault handles this case with default header values.

Error
*/
type GetSensorDataRawDefault struct {
	_statusCode int

	Payload *models.ErrorResponse
}

// Code gets the status code for the get sensor data raw default response
func (o *GetSensorDataRawDefault) Code() int {
	return o._statusCode
}

func (o *GetSensorDataRawDefault) Error() string {
	return fmt.Sprintf("[GET /sensors/{sensorId}/raw][%d] getSensorDataRaw default  %+v", o._statusCode, o.Payload)
}

func (o *GetSensorDataRawDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorResponse)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
